# =============================================================================
# MAIN TERRAFORM CONFIGURATION - EXAMPLE WITH CONSOLE ACCESS
# Creates a simple IAM user with BOTH programmatic AND console access
# This is an EXAMPLE file - copy content to main.tf when ready to use
# =============================================================================

# Create an IAM user
resource "aws_iam_user" "readonly_user" {
  name = var.username
  path = "/"

  tags = {
    Purpose     = "Learning Terraform"
    Environment = var.environment
    Project     = "practice-iam-terraform"
  }
}

# Create access keys for the user (for programmatic access)
resource "aws_iam_access_key" "readonly_user_key" {
  user = aws_iam_user.readonly_user.name
}

# Create console login profile (password access)
# This enables the user to login to AWS Console with username/password
resource "aws_iam_user_login_profile" "readonly_user_login" {
  user                    = aws_iam_user.readonly_user.name
  password_reset_required = true
  
  # Optional: Set a specific password length
  # password_length = 20
}

# Create a policy that allows read-only access to S3
resource "aws_iam_policy" "s3_readonly_policy" {
  name        = "${var.username}-s3-readonly"
  description = "Policy that allows read-only access to S3 buckets"

  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect = "Allow"
        Action = [
          "s3:GetObject",
          "s3:GetObjectVersion",
          "s3:ListBucket",
          "s3:ListAllMyBuckets",
          "s3:GetBucketLocation"
        ]
        Resource = [
          "arn:aws:s3:::*",
          "arn:aws:s3:::*/*"
        ]
      }
    ]
  })

  tags = {
    Purpose     = "Learning Terraform"
    Environment = var.environment
    Project     = "practice-iam-terraform"
  }
}

# Attach the policy to the user
resource "aws_iam_user_policy_attachment" "readonly_user_policy_attachment" {
  user       = aws_iam_user.readonly_user.name
  policy_arn = aws_iam_policy.s3_readonly_policy.arn
}

# =============================================================================
# ADDITIONAL FEATURES YOU CAN ADD:
# =============================================================================

# Optional: Add IAM user to a group
# resource "aws_iam_group" "readonly_group" {
#   name = "s3-readonly-group"
#   path = "/"
# }
#
# resource "aws_iam_group_membership" "readonly_group_membership" {
#   name = "readonly-group-membership"
#   users = [aws_iam_user.readonly_user.name]
#   group = aws_iam_group.readonly_group.name
# }

# Optional: Add MFA requirement for console access
# resource "aws_iam_user_policy" "force_mfa_policy" {
#   name = "${var.username}-force-mfa"
#   user = aws_iam_user.readonly_user.name
#   
#   policy = jsonencode({
#     Version = "2012-10-17"
#     Statement = [
#       {
#         Effect = "Deny"
#         NotAction = [
#           "iam:CreateVirtualMFADevice",
#           "iam:EnableMFADevice",
#           "iam:GetUser",
#           "iam:ListMFADevices",
#           "iam:ListVirtualMFADevices",
#           "iam:ResyncMFADevice",
#           "sts:GetSessionToken"
#         ]
#         Resource = "*"
#         Condition = {
#           BoolIfExists = {
#             "aws:MultiFactorAuthPresent" = "false"
#           }
#         }
#       }
#     ]
#   })
# }

# =============================================================================
# USAGE INSTRUCTIONS:
# 
# 1. Copy the desired resources from this file to main.tf
# 2. Run `terraform plan` to see what will be added
# 3. Run `terraform apply` to create the resources
# 4. Use `terraform output console_password` to get the password
# 5. Login to AWS Console with username and password
# 
# SECURITY NOTES:
# - The user will be forced to change password on first login
# - Consider enabling MFA for additional security
# - Review and adjust S3 permissions as needed
# =============================================================================
